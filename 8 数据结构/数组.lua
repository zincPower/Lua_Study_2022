---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/10/23 09:55
---

print("----------------------------")
print("数组初始化：")
do
    local array = {}
    for i = 1, 100 do
        array[i] = 0
    end

    print("#array", #array)
    print("array[9]", array[9])
    print("array[101]", array[101])
end

print("----------------------------")
print("数组初始化，修改起始下标：")
do
    local array = {}
    for i = -5, 5 do
        array[i] = 0
    end

    -- 这里的长度为 5 是因为从 1 开始计算
    print("#array", #array)
    print("array[-2]", array[-2])
    print("array[5]", array[5])
end

print("----------------------------")
print("创建并同时初始化数组：")
do
    local array = { 1, 3, 5, 7, 9 }
    print("#array", #array)
    print("array[3]", array[3])
    print("array[12]", array[12])
end

print("----------------------------")
print("矩阵初始化(二维数组)：")
do
    local M = 5
    local N = 5
    local matrix = {}
    -- 初始化数组
    for i = 1, M do
        local row = {}
        matrix[i] = row
        for j = 1, N do
            row[j] = j + i
        end
    end

    -- 打印数组
    for i = 1, #matrix do
        local row = matrix[i]
        local rowContent = ""
        for j = 1, #row do
            rowContent = rowContent .. " " .. row[j]
        end
        print(rowContent)
    end
end

print("----------------------------")
print("矩阵初始化(一维数组)：")
do
    local matrix = {}
    local M = 5
    local N = 5
    for i = 1, N do
        local aux = (i - 1) * M
        for j = 1, M do
            matrix[aux + j] = j + i
        end
    end

    local content = ""
    for i, v in ipairs(matrix) do
        content = content .. " " .. v
        if i % 5 == 0 then
            content = content .. "\n"
        end
    end
    print(content)
end

print("----------------------------")
print("矩阵相乘（行乘列）：")
do
    local a = {
        { 1, nil },
        { nil, 4 },
        { 3, 5 }
    }
    local b = {
        { 1, 3, nil, 5 },
        { 2, nil, 6, 4 }
    }
    local M = 3
    local N = 4
    local K = 2
    local c = {}
    -- 初始化 c 矩阵
    for i = 1, M do
        local row = {}
        c[i] = row
        for j = 1, N do
            row[j] = 0
        end
    end
    -- 遍历每一个元素，行乘列的形式处理
    for i = 1, M do
        for j = 1, N do
            for k = 1, K do
                c[i][j] = c[i][j] + (a[i][k] or 0) * (b[k][j] or 0)
            end
        end
    end
    -- 打印每个元素
    for i = 1, #c do
        local row = c[i]
        local rowContent = ""
        for j = 1, #row do
            rowContent = rowContent .. " " .. row[j]
        end
        print(rowContent)
    end
end

print("----------------------------")
print("矩阵相乘（行乘行）：")
do
    local a = {
        { 1, nil },
        { nil, 4 },
        { 3, 5 }
    }
    local b = {
        { 1, 3, nil, 5 },
        { 2, nil, 6, 4 }
    }
    local M = 3
    local N = 4
    local K = 2
    local c = {}
    -- 初始化 c 矩阵
    for i = 1, M do
        local row = {}
        c[i] = row
        for j = 1, N do
            row[j] = 0
        end
    end
    -- 遍历每一个元素，行乘列的形式处理
    for i = 1, M do
        for k = 1, K do
            for j = 1, N do
                c[i][j] = c[i][j] + (a[i][k] or 0) * (b[k][j] or 0)
            end
        end
    end
    -- 打印每个元素
    for i = 1, #c do
        local row = c[i]
        local rowContent = ""
        for j = 1, #row do
            rowContent = rowContent .. " " .. row[j]
        end
        print(rowContent)
    end
end

print("----------------------------")
print("矩阵相乘（pair 相乘）：")
do
    local a = {
        { 1, nil },
        { nil, 4 },
        { 3, 5 }
    }
    local b = {
        { 1, 3, nil, 5 },
        { 2, nil, 6, 4 }
    }

    --- a 和 b 是矩阵
    local function mulMatrix(matrixA, matrixB)
        local c = {}
        -- 遍历 a 所有行
        for i = 1, #matrixA do
            -- c 矩阵的行结果
            local resultLine = {}
            -- 遍历 a 矩阵行的每个内容，所有的 nil 都会被跳过
            for k, va in pairs(matrixA[i]) do
                -- 遍历 b 矩阵行的每个内容，所有 nil 都会被跳过
                for j, vb in pairs(matrixB[k]) do
                    local res = (resultLine[j] or 0) + va * vb
                    resultLine[j] = (res ~= 0) and res or nil
                end
            end
            c[i] = resultLine
        end
        return c
    end
    local c = mulMatrix(a, b)

    -- 打印每个元素
    for i = 1, #c do
        local row = c[i]
        local rowContent = ""
        for j = 1, #row do
            rowContent = rowContent .. " " .. (row[j] or "nil")
        end
        print(rowContent)
    end
end