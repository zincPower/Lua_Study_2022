---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/11/15 10:49
---

print("========================================")
print("创建一个对象：")
do
    local Account = { balance = 0 }
    function Account.withdraw(v)
        Account.balance = Account.balance - v
    end

    Account.withdraw(100)
    print(Account.balance)

    local a = Account
    Account = nil
    -- 这里会报错，因为 withdraw 内部使用了 Account ，而这个值已经被移除
    --a.withdraw(100)
end

print("========================================")
print("增加 self：")
do
    local Account = { balance = 0 }
    function Account.withdraw(self, v)
        self.balance = self.balance - v
    end

    local a = Account
    Account = nil
    a.withdraw(a, 100)
    print(a.balance)
end

print("========================================")
print("语法糖：")
do
    local Account = { balance = 0 }
    -- 使用 : 就相当于 function Account.withdraw(self, v)
    function Account.withdraw(self, v)
        --function Account:withdraw(v)
        self.balance = self.balance - v
    end

    local a = Account
    Account = nil
    a:withdraw(100)
    print(a.balance)

    a.withdraw(a, 100)
    print(a.balance)
end

print("========================================")
print("编写一个类：")
do
    local Account = { balance = 0 }
    function Account:new(o)
        o = o or {}
        -- 将自己设置为 __index 的元方法
        self.__index = self
        -- 将自己设置为 o 的元表，这样就会调用 self 的 __index 方法或表，这里就是 self 自身表
        setmetatable(o, self)
        return o
    end
    -- 使用 : 就相当于 function Account.withdraw(self, v)
    function Account:withdraw(v)
        self.balance = self.balance - v
    end

    local a = Account:new()
    a:withdraw(100)
    print("a.balance", a.balance)

    -- 这里调用 withdraw 后，a 和 b 自身就有 balance 字段了，也就不需要进行元表的查询
    local b = Account:new()
    print("b rawget", rawget(b, "balance"))
    b:withdraw(1000)
    print("b.balance", b.balance)
    print("b rawget", rawget(b, "balance"))

    print("a.balance", a.balance)
end