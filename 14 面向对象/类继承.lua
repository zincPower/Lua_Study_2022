---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/11/16 08:48
---

local Account = { balance = 0 }

function Account:new(o)
    print(self, "Account new")
    o = o or {}
    -- 将自己设置为 __index 的元方法
    self.__index = self
    -- 将自己设置为 o 的元表，这样就会调用 self 的 __index 方法或表，这里就是 self 自身表
    setmetatable(o, self)
    return o
end
-- 使用 : 就相当于 function Account.withdraw(self, v)
function Account:withdraw(v)
    print(self, "Account withdraw")
    if v > self.balance then
        error "insufficient funds"
    end
    self.balance = self.balance - v
end
function Account:deposit(v)
    print(self, "Account deposit")
    self.balance = self.balance + v
end

print("========================================")
print("继承：")
local SpecialAccount = Account:new()
-- 重写了 withdraw 方法
function SpecialAccount:withdraw(v)
    print(self, "SpecialAccount withdraw")
    if v - self.balance >= self:getLimit() then
        error "insufficient funds"
    end
    self.balance = self.balance - v
end
-- 增加方法
function SpecialAccount:getLimit()
    print(self, "SpecialAccount getLimit")
    return self.limit or 0
end

print("========================================")
print("初始化一个实例：")
local person = SpecialAccount:new({ limit = 1000 })
person:withdraw(10)
print(person.balance)

print("========================================")
print("给实例一个自定义方法：")
-- 给 person 自定义一个方法
function person:getLimit()
    print(self, "person getLimit")
    return self.balance * 0.10
end
-- 这个时候的限制就变为了自身的 getLimit
person.balance = 100000
person:withdraw(10)
print(person.balance)

print("========================================")
print("各个 table 的 hash：")
print("Account", Account)
print("SpecialAccount", SpecialAccount)
print("person", person)

print("========================================")
print("重载函数：")
local person2 = SpecialAccount:new()
function person2:withdraw()
    print("一个没有带参数的 withdraw")
end
-- Lua 并不会进行重载
person2:withdraw(10)