---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/4/23 17:02
---

print("========================================")
print("getupvalue 获取上值：")
do
    name = "江澎涌"
    local age = 29
    function foo()
        local heavy = 120
        return function()
            print(age)
            -- 如果没有调用 heavy ，则 heavy 就不是该闭包的上值
            --print(heavy)
            --print(_ENV.name)
            local func = debug.getinfo(1, "f").func
            for i = 1, math.huge do
                local n, v = debug.getupvalue(func, i)
                if not n then
                    break
                end
                --if n == "_ENV" then
                --    for i, v in pairs(v) do
                --        print(i,v)
                --    end
                --end
                print(n, "--------", v)
            end
        end
    end
    foo()()
end

print("========================================")
print("getupvalue 获取上值（不实用全局变量，连 _ENV 都会没有）：")
do
    name = "江澎涌"
    local print = print
    local getinfo = debug.getinfo
    local getupvalue = debug.getupvalue
    local huge = math.huge
    local age = 29
    function foo()
        local heavy = 120
        return function()
            print(age)
            local func = getinfo(1, "f").func
            for i = 1, huge do
                local n, v = getupvalue(func, i)
                if not n then
                    break
                end
                print(n, "--------", v)
            end
        end
    end
    foo()()
end

print("========================================")
print("setupvalue 设置上值：")
do
    name = "江澎涌"
    local age = 29
    local function foo()
        local heavy = 120
        function showinfo(func)
            for i = 1, math.huge do
                local n, v = debug.getupvalue(func, i)
                if not n then
                    break
                end
                print(n, "--------", v)
            end
        end

        return function()
            print(age)
            local func = debug.getinfo(1, "f").func
            print("设置上值前：")
            showinfo(func)

            -- 这里的 2 刚好就是指 age 变量
            debug.setupvalue(func, 2, 116)

            print("设置上值后：")
            showinfo(func)
        end
    end
    foo()()
end

--- 搜索顺序为
--- 1、局部变量
--- 2、非局部变量（即闭包内的变量）
--- 3、获取全局变量（通过 _ENV 进行获取）
local function getVarValue(name, level, isEnv)
    local value
    local found = false

    -- 取局部变量
    -- level 为 1 则表明是，当前 getVarValue 函数
    -- level 加一是为往外走一层
    level = (level or 1) + 1
    for i = 1, math.huge do
        local n, v = debug.getlocal(level, i)
        if not n then
            break
        end
        if n == name then
            value = v
            found = true
        end
    end
    if found then
        return "local", value
    end

    -- 获取当前函数，查找当前函数的上值
    local func = debug.getinfo(level, "f").func
    --print("func", func)
    for i = 1, math.huge do
        local n, v = debug.getupvalue(func, i)
        if not n then
            break
        end
        --print("value", n, v)
        --if n == "_ENV" then
        --    for i, v in pairs(v) do
        --        print(i,v)
        --    end
        --end
        if n == name then
            return "upValue", v
        end
    end
    -- 一个不使用全局变量的函数可能没有上值 _ENV ，所以为了避免死循环则需要判断
    if isEnv then
        return "noEnv"
    end

    -- 找上一层的 _ENV
    local g, env = getVarValue("_ENV", level, true)
    --print("global variable", g, env)
    if env then
        return "global", env[name]
    else
        return "noEnv"
    end
end

print("========================================")
print("查询变量：")
local heavy = 120
do
    age = 29
    local name = "jiang"
    local foundValue = function()
        value = "江澎涌"
        print("name:", name, getVarValue("name"))
        print("value:", value, getVarValue("value"))
        print("age:", age, getVarValue("age"))
        local value = 4
        do
            local value = 10
            print("name:", name, getVarValue("name"))
            print("heavy:", heavy, getVarValue("heavy"))
            print("value:", value, getVarValue("value"))
            print("age:", age, getVarValue("age"))
        end
    end
    foundValue()
end

print("========================================")
print("完全不使用全局变量，是不会有 _ENV 上值：")
do
    local print = print
    local foundValue = function()
        print("age:", getVarValue("age"))
    end
    print(foundValue)
    foundValue()
end