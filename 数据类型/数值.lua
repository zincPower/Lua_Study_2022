---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/4/4 3:00 PM
---

-- integer 和 float
print("integer 和 float 获取类型：")
print(math.type(3))
print(math.type(3.0))
print(math.type(3e10))
print(type(3))
print(type(3.0))

-- 十六进制浮点数
print("-------------------------")
print("十六进制：")
print(0x0.2 .. ":" .. math.type(0x0.2))
print(0x1p-1 .. ":" .. math.type(0x1p-1))
--print(0xa.bp2) -- 可用，只是 idea 会识别出错

-- 十六进制浮点数输出
print("-------------------------")
print("十六进制浮点数输出")
print(string.format("%a", 419))
print(string.format("%a", 0.1))

-- 数值除法
print("-------------------------")
print("数值除法：")
print(3 / 2)
print(3.0 / 2.0)
print(4 / 2)

-- floor 除法 运算符
print("-------------------------")
print("floor 除法，向下取整：")
print(3 // 2)
print(3.0 // 2)
print(6 // 2)
print(6.0 // 2.0)
print(-9 // 2)
print(1.5 // 0.5)

-- 取模
print("-------------------------")
print("取模：")
local pi = math.pi
print(3 % 2)
print(3.0 % 2)
print(-15 % 2)
print(pi % 0.01)
print(pi - pi % 0.01)

print("-------------------------")
print("幂运算：")
print(4 ^ (1 / 2))
print(4 ^ 2)
print(4 ^ (1 / 3))

print("-------------------------")
print("运算符：")
print("江澎涌" == "jiangpengyong")
print("江澎涌" ~= "jiang")
print("江澎涌" ~= 28)
--print("江澎涌" <= 28)
print(4 == 4.0)
print(4 <= 4.0)

print("-------------------------")
print("最大值和最小值：")
print("math.huge", math.huge, math.type(math.huge))
print("math.maxinteger", math.maxinteger, math.type(math.maxinteger))
print("math.mininteger", math.mininteger, math.type(math.mininteger))
--- 指数会转为浮点型，浮点型的范围为 [-2^53, 2^53]， 所以不相等
maxInteger = (2 ^ 63 - 1)
print("2^63-1", maxInteger, math.type(maxInteger))
print("maxInteger == math.maxinteger", maxInteger == math.maxinteger)
minInteger = -(2 ^ 63)
print("2^63", minInteger, math.type(minInteger))
print("minInteger == math.mininteger", minInteger == math.mininteger)
maxInteger = 0x7fffffffffffffff
print("0x7fffffffffffffff", maxInteger, math.type(maxInteger))
print("maxInteger == math.maxinteger", maxInteger == math.maxinteger)
minInteger = 0x8000000000000000
print("0x8000000000000000", minInteger, math.type(minInteger))
print("minInteger == math.mininteger", minInteger == math.mininteger)

print("-------------------------")
print("三角函数：")
print(math.deg(6.2831853071796))
print(math.rad(360))

-- 随机数
print("-------------------------")
print("随机数：")
math.randomseed(1)
local r1 = ""
for _ = 1, 5 do
    r1 = r1 .. " " .. math.random()
end
print("math.random() 十次：", r1)
local r2 = ""
for _ = 1, 5 do
    r2 = r2 .. " " .. math.random(10)
end
print("math.random() 十次：", r2)
local r3 = ""
for _ = 1, 5 do
    r3 = r3 .. " " .. math.random(11, 20)
end
print("math.random() 十次：", r3)

print("-------------------------")
print("取整函数：")
print(math.floor(3.3))
print(math.ceil(3.3))
print(math.modf(3.3))
print("最近值取整 float(x+0.5) 使用")
print(string.format("1.3 最近值取整：%f", math.floor(1.3 + 0.5)))
--x = 2 ^ 52 + 1
--local x = 4503599627370497.3
local x = 4503599627370497.5
print(string.format("大数字：%f", x))
print(string.format("大数字+0.5 floor ：%f", math.floor(x + 0.5)))
-- 处理 大数字 四舍五入
function round(x)
    local f = math.floor(x)
    if x == f then
        return f
    else
        return math.floor(x + 0.5)
    end
end
print("大数字 round: ", round(x))
print("大数字 round: ", round(x + 0.5))
print("2.5 round: ", round(2.5))

-- 无偏取整，向最近的偶数取整半个整数
function unbiasedRound(x)
    local f = math.floor(x)
    if (x == f) or (x % 2.0 == 0.5) then
        return f
    else
        return math.floor(x + 0.5)
    end
end
print("-------------------------")
print("无偏取整:")
print("2.5: ", unbiasedRound(2.5))
print("2.9: ", unbiasedRound(2.9))
print("3.5: ", unbiasedRound(3.5))
print("-2.5: ", unbiasedRound(-2.5))
print("-1.5: ", unbiasedRound(-1.5))

print("-------------------------")
print("整型溢出（回环）：")
print(math.maxinteger + 1 == math.mininteger)
print(math.mininteger - 1 == math.maxinteger)
print(-math.mininteger == math.mininteger)
print(math.mininteger // -1 == math.mininteger)
print(math.maxinteger)
print(0x7fffffffffffffff)
print(math.mininteger)
print(0x7fffffffffffffff + 1)
print(0x8000000000000000)

print("-------------------------")
print("浮点溢出（取近似值）：")
print(math.maxinteger + 1.0)
print(math.maxinteger + 2.0)
print(math.maxinteger + 1.0 == math.maxinteger + 2.0)

print("-------------------------")
print("浮点：")
print("12.7 - 20 + 7.3 = ", 12.7 - 20 + 7.3)
print("1/7 * 7 = ", (1 / 7) * 7)

print("-------------------------")
print("整型转浮点数：")
int1 = 3
print(int1, "type", math.type(int1))
fl1 = int1 + 0.0
print(fl1, "type", math.type(fl1))
bigInt = 0x0fffffffffffffff
bigIntToFloat = bigInt + 0.0
print(bigInt, " 转为 float:", bigIntToFloat, "是否相同：", (bigInt == bigIntToFloat))
print((9007199254740993 + 0.0) == 9007199254740993)
print((9007199254740993 + 0.0) == 9007199254740992)
print((9007199254740992 + 0.0) == 9007199254740992)
print((9007199254740991 + 0.0) == 9007199254740991)

print("-------------------------")
print("浮点数转整型")
fl2 = 3.0
print(fl2, "type", math.type(fl2))
int2 = fl2 | 0
print(int2, "type", math.type(int2))
-- 有小数会爆出 number has no integer representation
--print("有小数：", (3.2 | 0))
-- 超出范围爆出 number has no integer representation
--print("超出范围：", (2 ^ 64 | 0))
-- 数值没有用整型 bad argument #2 to 'random' (number has no integer representation)
--print(math.random(1, 3.5))
print(math.tointeger(-258.0))
print(math.tointeger(2 ^ 32))
print(math.tointeger(258.01))
print(math.tointeger(2 ^ 64))

print("-------------------------")
print("检测是否可以转为 int ：")
function cond2int(x)
    return math.tointeger(x) or x
end
print(cond2int(5.3))
print(cond2int(10.0))

print("-------------------------")
print("输出整型：")
print(3.0)
print(string.format("%s", 3.0))