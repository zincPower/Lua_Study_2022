---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/4/5 20:49
---

k = "jiang"
a = {}
a[k] = 28
a[29] = "xiao"
print(a[k])

-- 使用点获取元素
print("")
print("点获取元素")
print(a.k)
print(a.jiang)

print("")
print("浮点型键")
c = {}
c[2.0] = 10
print(c[2])

print("")
-- 构造函数
-- 空
table1 = {}
-- 列表式，键会是从 1 开始往上递增的值
table2 = { "Jiang", "peng", "yong", }
-- 记录式
table3 = { a = "1", b = "2", c = "3" }
-- 通用
table4 = { [-1] = "j", "i", ["a"] = "a", "n", c = "g" }
print(table4[1])

-- 获取序列长度
sequence = {}
for i = 1, 10 do
    sequence[i] = i * i;
end
-- 如果删除了第十个元素，则长度会变动
-- 对于存在空洞的列表，序列长度不可靠
--sequence[5] = nil
--sequence[10] = nil
--sequence[11] = 11 * 11
print("sequence size: " .. #sequence)
for i = 1, #sequence do
    print(sequence[i])
end
-- 不是序列，获取序列长度是无用的
sequence2 = { a = "jiang" }
print(#sequence2)

print("")
print("遍历 table ")
-- 普通 table 遍历，因底层实现问题，pairs 不会确保顺序，可能每次遍历结果都不同，但每个元素一定会出现一次
print("普通 table 遍历")
table5 = { 10, print, x = 12, k = "hi" }
for k, v in pairs(table5) do
    print(k, "-->", v)
end
-- 列表 table 遍历，ipairs 会确保顺序进行
print("列表 table 遍历")
table6 = { 10, print, 12, "hi" }
for i, v in ipairs(table6) do
    print(i, "-->", v)
end
-- 序列数值遍历
print("序列数值遍历")
for i = 1, #table6 do
    print(i, "-->", table6[i])
end

print("")
print("模拟安全操作")
----- 安全操作 -------
E = {}
--company = { director = { address = { zipcode = "10080" } } }
company = { }
zip = (((company or E).director or E).address or E).zipcode
print(zip)

function showTable(table)
    list = ""
    for i, v in ipairs(table) do
        list = list .. "[" .. i .. "]=" .. v .. ", "
    end
    print(list)
end

print("")
print("表标准库操作---列表和序列")
----- 表标准库操作 -----
table7 = { 10, 20, 30 }
showTable(table7)
table.insert(table7, 2, 909)
showTable(table7)
-- 如果不设置下标参数，则插在末尾
table.insert(table7, 50)
showTable(table7)
table.remove(table7, 3)
showTable(table7)
-- 如果不设置下标参数，则移除末尾
table.remove(table7)
showTable(table7)
-- move 模拟在开头插入元素
table.move(table7, 1, #table7, 2)
table7[1] = 0
showTable(table7)
-- move 模拟删除第一个元素，记得要将末尾进行 nil 删除，否则最后元素还存在
table.move(table7, 2, #table7, 1)
table7[#table7] = nil
showTable(table7)
-- move 将表 a 拷贝到表 b , 可以通过 (#b + 1) 将元素接到表 b 末尾
table8 = { 20, 20, 30, 40, 50 }
table.move(table7, 1, #table7, #table8 + 1, table8)
showTable(table7)
showTable(table8)


