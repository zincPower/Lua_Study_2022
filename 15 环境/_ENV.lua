---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/4/20 08:25
---

print("========================================")
print("_ENV：")
do
    print(_ENV, _G)
end

print("========================================")
print("代码转换：")
do
    local i = 10
    j = 100
    k = j + i
    print(i, j, k)
end

print("========================================")
print("_ENV 的使用：")
do
    -- 通过将 _ENV 设置为 nil ， 从而打断了与全局关系
    local print, sin = print, math.sin
    -- 将 _ENV 置为 nil ，后续就没办法直接使用全局了
    --_ENV = nil
    print(13)
    print(sin(13))
    -- 如果设置了 _ENV = nil ，则会抛出 attempt to index a nil value (upvalue '_ENV')
    print(math.cos(13))
end
-- 恢复 _ENV ，让后续的例子可以继续
_ENV = _G

print("========================================")
print("_ENV 被置空：")
do
    a = 1000
    print("a", a)
    print("_ENV.a", _ENV.a)
    -- attempt to index a nil value (upvalue '_ENV')
    --_ENV = nil
    -- 这里的 _G 也会找不到，因为会转为 _ENV._G.a
    print("_G.a", _G.a)
end
-- 恢复 _ENV ，让后续的例子可以继续
_ENV = _G

print("========================================")
print("设置一个 _ENV 进行新环境的接收：")
do
    _ENV = { _G = _G }
    b = 10
    _G.print("b", b)
    _G.print("_ENV.b", _ENV.b)
    _G.print("_G.b", _G.b)
end
-- 恢复 _ENV ，让后续的例子可以继续
_ENV = _G

print("========================================")
print("元方法设置 _ENV ：")
do
    -- 全局设置一个变量
    _G.name = "jiang peng yong"

    -- 设置新的 _ENV 表，并且设置元表，这样 _ENV 没有的则会去到 _G 进行获取，
    -- 然后新设置的值则存储在 _ENV 中，并不会污染到 _G
    local newENV = {}
    setmetatable(newENV, { __index = _G })
    _ENV = newENV

    -- 因为 _ENV 没有 name ，所以获取的是 _G 的 name
    print(name)
    name = "江澎涌"
    -- 这里获取的是 _ENV.name
    print(name)
    -- 这里获取的是全局变量 name
    print(_G.name)
end
-- 恢复 _ENV ，让后续的例子可以继续
_ENV = _G

print("========================================")
print("局部变量 _ENV：")
do
    name = "jiang"
    do
        local _ENV = { _G = _G, name = "江" }
        _G.print(name)
    end
    print(name)
end

print("========================================")
print("传递 _ENV 给方法，改变方法内的 _ENV ：")
do
    function factory(_ENV)
        local i = j + k
        return function()
            return i
        end
    end

    print(factory({ j = 10, k = 20 })())
    print(factory({ j = 100, k = 200 })())
    print(i, j, k)
end