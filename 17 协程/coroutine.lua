---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by jiangpengyong.
--- DateTime: 2022/4/22 08:56
---

print("==================================================")
print("创建协程：")
do
    co = coroutine.create(function()
        print(coroutine.status(co))
        print("Hello, jiang pengyong.")
    end)
    print("status(coroutine)", coroutine.status(co))
    print("type(coroutine)", type(co))
    coroutine.resume(co)
    print("status(coroutine)", coroutine.status(co))
end

print("==================================================")
print("协程的挂起：")
do
    local co = coroutine.create(function()
        coroutine.yield()
    end)
    coroutine.resume(co)
    print(coroutine.status(co))
end

print("==================================================")
print("协程的挂起和重新启动：")
do
    -- coroutine.yield 挂起
    local co = coroutine.create(function()
        for i = 1, 5 do
            -- yield 可以抛出返回值
            coroutine.yield(i)
        end
    end)
    for _ = 1, 7 do
        print(coroutine.resume(co))
        print(coroutine.status(co))
    end
end

print("==================================================")
print("pcall 包裹协程：")
do
    local co = coroutine.create(function()
        error("协程内部错误")
        coroutine.yield()
    end)
    print(coroutine.resume(co))
    print(coroutine.status(co))
end

print("==================================================")
print("协程在调用协程")
do
    local B
    local A = coroutine.create(function()
        print("run A")
        coroutine.resume(B)
        print("end A")
    end)
    B = coroutine.create(function()
        print("start B")
        print("A status", coroutine.status(A))
        print("B status", coroutine.status(B))
        print("end B")
    end)
    coroutine.resume(A)
end

print("==================================================")
print("协程传参：")
do
    local co = coroutine.create(function(a, b)
        return a + b, a - b, "江澎涌"
    end)
    print(coroutine.resume(co, 1, 2))
end

print("==================================================")
print("协程传参——第一次和第二次不同参数：")
do
    local co = coroutine.create(function(x)
        print("接收第一次参数：", x)
        a, b, c, d, e = coroutine.yield("第一次返回值")
        print("接收第二次参数：", a, b, c, d, e)
        -- 协程结束，会将返回值当作 resume 的返回值
        return "第二次返回值"
    end)
    print(coroutine.resume(co, "hi"))
    print(coroutine.resume(co, 4, 5, "江澎涌"))
end

print("==================================================")
print("获取当前执行协程：")
do
    print(coroutine.running())
end

print("==================================================")
print("coroutine.wrap")
do
    local co = coroutine.wrap(function(name)
        print(string.format("Hello, %s.", name))
        local age = coroutine.yield("Hi.")
        --error("会直接抛出异常")
        print(age)
        return "Bye."
    end)
    print(co("jiang pengyong"))
    print(co("29"))
end

print("==================================================")
print("coroutine.isyieldable()")
do
    local co = coroutine.create(function()
        print(coroutine.isyieldable())
        print("Hello, jiang pengyong.")
    end)
    coroutine.resume(co)
    print(coroutine.isyieldable())
end